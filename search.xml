<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Context</title>
    <url>/2022/04/15/go_context/</url>
    <content><![CDATA[<p>包context定义了Context类型，它跨API边界和进程之间传递截止日期、取消信号和其他请求范围的值。</p>
<p>对服务器的传入请求应创建Context，对服务器的传出调用应接受Context。它们之间的函数调用链必须传播上下文，可以选择将其替换为使用WithCancel、WithDeadline、WithTimeout或WithValue创建的派生上下文。取消某个上下文时，从该上下文派生的所有上下文也将被取消。<br>WithCancel、WithDeadline和WithTimeout函数接受一个上下文（父上下文），并返回一个派生上下文（子上下文）和一个CancelFunc。调用CancelFunc会取</p>
<p>消子项及其子项，删除父项对子项的引用，并停止任何关联的计时器。未能调用CancelFunc会泄漏子级及其子级，直到父级被取消或计时器触发。go vet工具检查所有控制流路径上是否使用了CancelFuncs。</p>
<p>使用上下文的程序应遵循以下规则，以保持包之间的接口一致，并启用静态分析工具来检查上下文传播：</p>
<p>不要在结构类型中存储上下文；相反，将上下文显式地传递给每个需要它的函数。上下文应该是第一个参数，通常命名为ctx：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>实现 hash</title>
    <url>/2022/04/08/go_lhash/</url>
    <content><![CDATA[<h3 id="打造一个自己hash-方法"><a href="#打造一个自己hash-方法" class="headerlink" title="打造一个自己hash 方法"></a>打造一个自己hash 方法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package bash</span><br><span class="line">// 业务需求紧张</span><br><span class="line">// map[interface&#123;&#125;]int64 中的 int64 后面需要调整为interface</span><br><span class="line">type LHash map[interface&#123;&#125;]int64</span><br><span class="line"></span><br><span class="line">func NewLHash() LHash &#123;</span><br><span class="line">    return make(LHash)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Add 加法</span><br><span class="line">func (l LHash) Add(k interface&#123;&#125;, v int64) &#123;</span><br><span class="line">    l[k] += v</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Sub 减法</span><br><span class="line">func (l LHash) Sub(k interface&#123;&#125;, v int64) &#123;</span><br><span class="line">    l[k] -= v</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Save 保存变更</span><br><span class="line">func (l LHash) Save(k interface&#123;&#125;, v int64) &#123;</span><br><span class="line">    l[k] = v</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Multi 乘法</span><br><span class="line">func (l LHash) Multi(k interface&#123;&#125;, v int64) &#123;</span><br><span class="line">    if _, ok := l[k]; !ok &#123;</span><br><span class="line">        l[k] = v</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line">    l[k] = l[k] * v</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Division 除法</span><br><span class="line">func (l LHash) Division(k interface&#123;&#125;, v int64) &#123;</span><br><span class="line">    if _, ok := l[k]; !ok &#123;</span><br><span class="line">        l[k] = v</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    l[k] = l[k] / v</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 获得</span><br><span class="line">func (l LHash) GetVal(k interface&#123;&#125;) (ok bool, v int64) &#123;</span><br><span class="line">    v, ok = l[k]</span><br><span class="line">    return</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// IsExist 是否存在</span><br><span class="line">func (l LHash) IsExist(k interface&#123;&#125;) (isExist bool) &#123;</span><br><span class="line">    _, isExist = l[k]</span><br><span class="line">    return</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// NotExistAndSave 不存在插入, 存在不更新 返回是否存在</span><br><span class="line">func (l LHash) NotExistAndSave(k interface&#123;&#125;, v int64) (isExist bool) &#123;</span><br><span class="line">    if _, ok := l[k]; !ok &#123;</span><br><span class="line">        l[k] = v</span><br><span class="line">        return false</span><br><span class="line">    &#125;</span><br><span class="line">    return true</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>go 小知识</title>
    <url>/2022/04/11/go_tips/</url>
    <content><![CDATA[<h3 id="学习一下-go-小细节"><a href="#学习一下-go-小细节" class="headerlink" title="学习一下 go 小细节"></a>学习一下 go 小细节</h3><h4 id="chan-跟-goroutine"><a href="#chan-跟-goroutine" class="headerlink" title="chan 跟 goroutine"></a>chan 跟 goroutine</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line">func main()&#123;</span><br><span class="line">    var thisIsChan chan struct&#123;&#125;</span><br><span class="line">    thisIsChan = make(chan struct&#123;&#125;)</span><br><span class="line">    // thisIsChan = make(chan struct&#123;&#125;, 10)</span><br><span class="line">    &lt;-thisIsChan</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<pre><code>以上代码中， build 正常通过， 运行就会出现painc(&quot;fatal error: all goroutines are asleep - deadlock!&quot;)
处理：只要有一条 goroutine running 代码都可以正常运行 
</code></pre>
<h4 id="slice-地址问题"><a href="#slice-地址问题" class="headerlink" title="slice 地址问题"></a>slice 地址问题</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line">  func main()&#123;</span><br><span class="line">      a := []int16&#123;1, 2, 3&#125;</span><br><span class="line">      b := a[1:]</span><br><span class="line">      b[0] = 4</span><br><span class="line">      // 4 , 4</span><br><span class="line">      // a b 地址相同</span><br><span class="line">      fmt.Println(a[1], b[0])</span><br><span class="line">      </span><br><span class="line">      a = append(a, 6)</span><br><span class="line">      b[0] = 5</span><br><span class="line">      // 4 5</span><br><span class="line">      // 这是a append 地址发生变化</span><br><span class="line">      fmt.Println(a[1], b[0])</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h4 id="map-遍历"><a href="#map-遍历" class="headerlink" title="map 遍历"></a>map 遍历</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line">    func main() &#123;</span><br><span class="line">        m := map[int]string&#123;0:&quot;一&quot;,1:&quot;二&quot;&#125;</span><br><span class="line">        for k,v := range m &#123;</span><br><span class="line">            fmt.Println(k,v)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<pre><code>这是时候我们会一口气的回答上:
    0 &quot;一&quot;
    1 &quot;二&quot;
肯定会忘map是无序
    1 &quot;二&quot;
    0 &quot;一&quot;
这个也是正确的答案 
</code></pre>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>【消耗物品】代码问题</title>
    <url>/2022/04/15/service_code_cost_item/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package demo_item</span><br><span class="line"></span><br><span class="line">// 问题：</span><br><span class="line">//		处理珍珠、海星、贝壳、功能物品消耗，项目中接口出现多种消耗物品case都自己造轮子 (列如下： DemoItem1接口 )</span><br><span class="line">// 想法：</span><br><span class="line">//		考虑把case 脱离出来成为一个公共的方法（列如下： DemoItem2接口）</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">	&quot;wll/game_server/dat&quot;</span><br><span class="line">	&quot;wll/game_server/mdb&quot;</span><br><span class="line">	&quot;wll/game_server/module&quot;</span><br><span class="line">	&quot;wll/internal/core/fail&quot;</span><br><span class="line">	&quot;wll/internal/core/util&quot;</span><br><span class="line">	&quot;github.com/funny/link&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">type demo_item struct &#123;</span><br><span class="line">&#125;</span><br><span class="line">type ItemIn struct &#123;</span><br><span class="line">	Type   int16</span><br><span class="line">	ItemId int32</span><br><span class="line">	Num    int64</span><br><span class="line">&#125;</span><br><span class="line">type ItemOut struct &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (this *demo_item) DemoItem1(session *link.Session, in *ItemIn) &#123;</span><br><span class="line">	db := module.GetPlayerDB(session)</span><br><span class="line">	op := int16(1)</span><br><span class="line">	switch in.Type &#123;</span><br><span class="line">	case dat.GetEnumValue(dat.EnumConstValueSign.CurrencyTypePearls):</span><br><span class="line">		this.Player.DecreasePearls(db, in.Num, op)</span><br><span class="line">	case dat.GetEnumValue(dat.EnumConstValueSign.CurrencyTypeCoupons):</span><br><span class="line">		this.Player.DecreaseCoupons(db, in.Num, op)</span><br><span class="line">	case dat.GetEnumValue(dat.EnumConstValueSign.CurrencyTypeCookingHuntTicket):</span><br><span class="line">		ticketID := dat.GetConstValue(dat.CommonConstSign.Pet_PetCookingHuntTicketID)</span><br><span class="line">		playerItem := db.LookupPlayerItemByItemId(int32(ticketID))</span><br><span class="line">		this.Item.DecreaseItem(db, playerItem, 1, op, true)</span><br><span class="line">	default:</span><br><span class="line">		fail.When(true, &quot;BuyType error&quot;)</span><br><span class="line">	&#125;</span><br><span class="line">	// 处理</span><br><span class="line">	// 代码块</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 剥离case消费物品</span><br><span class="line">func (this *demo_item) DemoItem2(session *link.Session, in *ItemIn) &#123;</span><br><span class="line">	db := module.GetPlayerDB(session)</span><br><span class="line">	op := int16(1)</span><br><span class="line"></span><br><span class="line">	// 走配置 不要走特殊处理</span><br><span class="line">	itemList := util.Int64Slice&#123;1, 2, 3, 4&#125;</span><br><span class="line"></span><br><span class="line">	// 代码判断 是否符合ItemId</span><br><span class="line">	module.FailUnClose(util.InSlice(in.ItemId, itemList), session, &quot;itemId not in&quot;)</span><br><span class="line"></span><br><span class="line">	module.FailUnClose(!this.HandleDeleteItem(db, in.ItemId, op, in.Num), session, &quot;item num not enough &quot;)</span><br><span class="line">	// 处理</span><br><span class="line">	// 代码块</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 成为高可用代码片段, 减少重复造轮子</span><br><span class="line">func (this *demo_item) HandleDeleteItem(db *mdb.PlayerDB, itemId int32, op int16, num int64) (isCost bool) &#123;</span><br><span class="line">	isCost = true</span><br><span class="line">	// 特殊物品判断</span><br><span class="line">	switch itemId &#123;</span><br><span class="line">	case 0:</span><br><span class="line">		return false</span><br><span class="line">	case dat.GItemCoinId:</span><br><span class="line">		this.Player.DecreaseCoins(db, num, op)</span><br><span class="line">		return</span><br><span class="line">	case dat.GItemPearlId:</span><br><span class="line">		this.Player.DecreasePearls(db, num, op)</span><br><span class="line">		return</span><br><span class="line">	case dat.GItemCouponId:</span><br><span class="line">		this.Player.DecreaseCoupons(db, num, op)</span><br><span class="line">		return</span><br><span class="line">	default:</span><br><span class="line">		playerItem := db.LookupPlayerItemByItemId(itemId)</span><br><span class="line">		if playerItem == nil || playerItem.Num &lt; int32(num) &#123;</span><br><span class="line">			return false</span><br><span class="line">		&#125;</span><br><span class="line">		this.ALL.Item.DecreaseItem(db, playerItem, num, op, true)</span><br><span class="line">		return</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	return</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>service</category>
      </categories>
      <tags>
        <tag>service code</tag>
      </tags>
  </entry>
</search>
